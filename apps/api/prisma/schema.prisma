generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  SECRETARY
  TREASURER
  COMMITTEE_MEMBER
  LENDER
  BORROWER
  GUARANTOR
  AUDITOR
}

enum LoanStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  DISBURSED
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum LoanType {
  STANDARD
  EMERGENCY
  EDUCATION
  WEDDING
  MEDICAL
  PROFESSIONAL
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  DIRECT_DEBIT
  CASH
  CHECK
  OTHER
}

enum GuaranteeType {
  SIMPLE
  JOINT
  COLLECTIVE
  DEPOSIT
  ASSET_BACKED
}

enum GuaranteeStatus {
  PENDING
  ACTIVE
  INVOKED
  RELEASED
  CANCELLED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum ApprovalVoteType {
  APPROVE
  REJECT
  ABSTAIN
  REQUEST_INFO
}

// Models
model User {
  id                String           @id @default(cuid())
  email             String           @unique
  passwordHash      String
  firstName         String
  lastName          String
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  country           String?
  role              Role             @default(BORROWER)
  isActive          Boolean          @default(true)
  emailVerified     Boolean          @default(false)
  phoneVerified     Boolean          @default(false)
  twoFactorEnabled  Boolean          @default(false)
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  
  // Relations
  profile           Profile?
  borrowedLoans     Loan[]           @relation("BorrowerLoans")
  guarantees        Guarantee[]      @relation("GuarantorGuarantees")
  contributions     Contribution[]
  notifications     Notification[]   @relation("UserNotifications")
  approvalVotes     ApprovalVote[]
  auditLogs         AuditLog[]       @relation("UserAuditLogs")
  sessions          Session[]
  uploadedDocuments Document[]       @relation("UploadedDocuments")
  verifiedDocuments Document[]       @relation("VerifiedDocuments")
  importSessions    ImportSession[]  @relation("ImportSessions")
  createdTemplates  ImportTemplate[] @relation("CreatedTemplates")
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([email])
  @@index([role])
}

model Profile {
  id                String           @id @default(cuid())
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Additional profile information
  dateOfBirth       DateTime?
  nationalId        String?
  occupation        String?
  monthlyIncome     Decimal?         @db.Money
  maritalStatus     String?
  numberOfChildren  Int?
  
  // Community specific
  communityMemberSince DateTime?
  synagogue         String?
  referredBy        String?
  
  // Financial profile
  creditScore       Int?
  maxLoanAmount     Decimal?         @db.Money
  reliabilityScore  Float?           @default(100)
  
  // Documents
  documents         Document[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Loan {
  id                String           @id @default(cuid())
  loanNumber        String           @unique
  borrowerId        String
  borrower          User             @relation("BorrowerLoans", fields: [borrowerId], references: [id])
  
  // Loan details
  amount            Decimal          @db.Money
  type              LoanType
  status            LoanStatus       @default(DRAFT)
  purpose           String           @db.Text
  purposeDetails    Json?
  
  // Dates
  requestDate       DateTime         @default(now())
  reviewStartDate   DateTime?
  approvalDate      DateTime?
  rejectionDate     DateTime?
  disbursementDate  DateTime?
  expectedEndDate   DateTime?
  actualEndDate     DateTime?
  
  // Financial terms
  numberOfInstallments Int
  installmentAmount    Decimal?      @db.Money
  totalRepaid          Decimal       @default(0) @db.Money
  outstandingAmount    Decimal       @default(0) @db.Money
  
  // Committee decision
  committeeNotes    String?          @db.Text
  rejectionReason   String?
  
  // Single decision maker fields
  approvedBy        String?          // ID of the single approver (for direct approval)
  approvalComments  String?          @db.Text
  approvalConditions String?         @db.Text
  rejectedBy        String?          // ID of the single rejecter (for direct rejection)
  rejectionComments String?          @db.Text
  
  // Relations
  guarantees        Guarantee[]
  payments          Payment[]
  repaymentSchedule RepaymentSchedule[]
  documents         Document[]       @relation("LoanDocuments")
  approvalVotes     ApprovalVote[]
  auditLogs         AuditLog[]       @relation("LoanAuditLogs")
  notifications     Notification[]   @relation("LoanNotifications")
  treasuryFlows     TreasuryFlow[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([borrowerId])
  @@index([status])
  @@index([type])
  @@index([loanNumber])
}

model Guarantee {
  id                String           @id @default(cuid())
  loanId            String
  loan              Loan             @relation(fields: [loanId], references: [id])
  guarantorId       String
  guarantor         User             @relation("GuarantorGuarantees", fields: [guarantorId], references: [id])
  
  type              GuaranteeType
  status            GuaranteeStatus  @default(PENDING)
  amount            Decimal          @db.Money
  percentage        Float?           // Percentage of loan guaranteed
  
  // Dates
  requestDate       DateTime         @default(now())
  signedDate        DateTime?
  activatedDate     DateTime?
  releasedDate      DateTime?
  
  // Digital signature
  signatureHash     String?
  signatureIp       String?
  
  // Documents
  documents         Document[]       @relation("GuaranteeDocuments")
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([loanId])
  @@index([guarantorId])
  @@index([status])
  @@unique([loanId, guarantorId])
}

model Payment {
  id                String           @id @default(cuid())
  paymentNumber     String           @unique
  loanId            String?
  loan              Loan?            @relation(fields: [loanId], references: [id])
  contributionId    String?
  contribution      Contribution?    @relation(fields: [contributionId], references: [id])
  
  amount            Decimal          @db.Money
  currency          String           @default("ILS")
  status            PaymentStatus    @default(PENDING)
  method            PaymentMethod
  
  // Transaction details
  transactionRef    String?
  processorRef      String?          // External payment processor reference
  processorResponse Json?
  
  // Dates
  scheduledDate     DateTime?
  processedDate     DateTime?
  failedDate        DateTime?
  
  // Metadata
  description       String?
  metadata          Json?
  
  // Relations
  treasuryFlows     TreasuryFlow[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([loanId])
  @@index([contributionId])
  @@index([status])
  @@index([paymentNumber])
}

model RepaymentSchedule {
  id                String           @id @default(cuid())
  loanId            String
  loan              Loan             @relation(fields: [loanId], references: [id])
  
  installmentNumber Int
  dueDate           DateTime
  amount            Decimal          @db.Money
  principalAmount   Decimal          @db.Money
  
  isPaid            Boolean          @default(false)
  paidDate          DateTime?
  paidAmount        Decimal?         @db.Money
  
  isLate            Boolean          @default(false)
  daysLate          Int              @default(0)
  lateFeesApplied   Boolean          @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([loanId])
  @@index([dueDate])
  @@unique([loanId, installmentNumber])
}

model Contribution {
  id                String           @id @default(cuid())
  contributorId     String
  contributor       User             @relation(fields: [contributorId], references: [id])
  
  amount            Decimal          @db.Money
  type              String           // DONATION, LOAN_FUND, EMERGENCY_FUND
  campaignId        String?
  campaign          Campaign?        @relation(fields: [campaignId], references: [id])
  
  // Payment
  payments          Payment[]
  
  // Relations
  treasuryFlows     TreasuryFlow[]
  
  // Tax receipt
  taxReceiptIssued  Boolean          @default(false)
  taxReceiptNumber  String?
  taxReceiptDate    DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([contributorId])
  @@index([campaignId])
}

model Campaign {
  id                String           @id @default(cuid())
  name              String
  description       String           @db.Text
  targetAmount      Decimal          @db.Money
  raisedAmount      Decimal          @default(0) @db.Money
  
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean          @default(true)
  
  contributions     Contribution[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([isActive])
}

model Document {
  id                String           @id @default(cuid())
  
  // Relations
  uploaderId        String
  uploader          User             @relation("UploadedDocuments", fields: [uploaderId], references: [id])
  
  profileId         String?
  profile           Profile?         @relation(fields: [profileId], references: [id])
  loanId            String?
  loan              Loan?            @relation("LoanDocuments", fields: [loanId], references: [id])
  guaranteeId       String?
  guarantee         Guarantee?       @relation("GuaranteeDocuments", fields: [guaranteeId], references: [id])
  
  type              String           // ID_CARD, PAY_SLIP, BANK_STATEMENT, CONTRACT, etc.
  name              String
  description       String?
  
  // File details
  fileUrl           String
  fileName          String
  originalName      String
  fileSize          Int
  mimeType          String
  path              String           // Server file path
  
  // Security
  isEncrypted       Boolean          @default(false)
  encryptionKey     String?
  checksum          String?          // SHA256 hash for integrity verification
  
  // Verification
  isVerified        Boolean          @default(false)
  verifiedBy        String?
  verifier          User?            @relation("VerifiedDocuments", fields: [verifiedBy], references: [id])
  verifiedAt        DateTime?
  verificationNotes String?
  
  // Status
  status            String           @default("PENDING") // PENDING, APPROVED, REJECTED, EXPIRED, ARCHIVED
  expiresAt         DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([uploaderId])
  @@index([profileId])
  @@index([loanId])
  @@index([guaranteeId])
  @@index([type])
  @@index([status])
}

model Notification {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation("UserNotifications", fields: [userId], references: [id])
  
  type              NotificationType
  title             String
  message           String           @db.Text
  
  // Related entity
  loanId            String?
  loan              Loan?            @relation("LoanNotifications", fields: [loanId], references: [id])
  
  // Status
  isRead            Boolean          @default(false)
  readAt            DateTime?
  isSent            Boolean          @default(false)
  sentAt            DateTime?
  
  // Metadata
  metadata          Json?
  priority          String           @default("normal") // low, normal, high, urgent
  
  createdAt         DateTime         @default(now())
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model ApprovalVote {
  id                String           @id @default(cuid())
  loanId            String
  loan              Loan             @relation(fields: [loanId], references: [id])
  voterId           String
  voter             User             @relation(fields: [voterId], references: [id])
  
  vote              ApprovalVoteType
  comment           String?          @db.Text
  votedAt           DateTime         @default(now())
  
  createdAt         DateTime         @default(now())
  
  @@unique([loanId, voterId])
  @@index([loanId])
  @@index([voterId])
}

model AuditLog {
  id                String           @id @default(cuid())
  userId            String?
  user              User?            @relation("UserAuditLogs", fields: [userId], references: [id])
  
  action            String           // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  entityType        String           // User, Loan, Payment, etc.
  entityId          String?
  
  // Related entities
  loanId            String?
  loan              Loan?            @relation("LoanAuditLogs", fields: [loanId], references: [id])
  
  // Details
  oldValues         Json?
  newValues         Json?
  ipAddress         String?
  userAgent         String?
  
  createdAt         DateTime         @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model Session {
  id                String           @id @default(cuid())
  sessionToken      String           @unique
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires           DateTime
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([userId])
  @@index([sessionToken])
}

model SystemConfig {
  id                String           @id @default(cuid())
  key               String           @unique
  value             Json
  description       String?
  isPublic          Boolean          @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([key])
}

// Treasury Forecasting Models
enum ForecastScenario {
  OPTIMISTIC
  REALISTIC
  PESSIMISTIC
}

enum AlertType {
  LOW_CASH_FLOW
  NEGATIVE_BALANCE
  HIGH_DEMAND
  LIQUIDITY_WARNING
  PAYMENT_DELAY
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
  URGENT
}

enum TreasuryFlowType {
  INFLOW
  OUTFLOW
}

enum TreasuryFlowCategory {
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  CONTRIBUTION
  DEPOSIT_WITHDRAWAL
  OPERATIONAL_EXPENSE
  INTEREST_EARNED
  FEE_INCOME
  OTHER
}

model TreasuryForecast {
  id                String           @id @default(cuid())
  
  // Forecast parameters
  forecastDate      DateTime         // Date this forecast was generated
  periodDays        Int              // Forecast period in days (30, 60, 90)
  scenario          ForecastScenario @default(REALISTIC)
  
  // Financial data
  currentBalance    Decimal          @db.Money
  projectedBalance  Decimal          @db.Money
  minBalance        Decimal          @db.Money // Lowest projected balance during period
  maxBalance        Decimal          @db.Money // Highest projected balance during period
  
  // Cash flow summary
  totalInflows      Decimal          @default(0) @db.Money
  totalOutflows     Decimal          @default(0) @db.Money
  netCashFlow       Decimal          @default(0) @db.Money
  
  // Risk metrics
  liquidityRisk     Float            @default(0) // 0-100 scale
  volatilityIndex   Float            @default(0) // Measures forecast volatility
  confidenceLevel   Float            @default(0) // Confidence in predictions (0-100)
  
  // Metadata
  calculatedAt      DateTime         @default(now())
  calculationTime   Int              // Time taken to calculate in ms
  dataPoints        Int              @default(0) // Number of data points used
  
  // Relations
  alerts            ForecastAlert[]
  flows             TreasuryFlow[]   @relation("ForecastFlows")
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([forecastDate])
  @@index([periodDays])
  @@index([scenario])
}

model ForecastAlert {
  id                String           @id @default(cuid())
  forecastId        String
  forecast          TreasuryForecast @relation(fields: [forecastId], references: [id], onDelete: Cascade)
  
  type              AlertType
  severity          AlertSeverity    @default(WARNING)
  title             String
  message           String           @db.Text
  
  // Alert data
  triggeredAt       DateTime         @default(now())
  projectedDate     DateTime?        // When the issue is projected to occur
  amount            Decimal?         @db.Money // Amount involved (if applicable)
  threshold         Decimal?         @db.Money // Threshold that was crossed
  
  // Status
  isActive          Boolean          @default(true)
  isAcknowledged    Boolean          @default(false)
  acknowledgedBy    String?
  acknowledgedAt    DateTime?
  
  // Recommendations
  recommendations   Json?            // Array of suggested actions
  
  // Metadata
  metadata          Json?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([forecastId])
  @@index([type])
  @@index([severity])
  @@index([isActive])
  @@index([triggeredAt])
}

model TreasuryFlow {
  id                String           @id @default(cuid())
  
  // Basic flow information
  type              TreasuryFlowType
  category          TreasuryFlowCategory
  amount            Decimal          @db.Money
  description       String
  
  // Timing
  expectedDate      DateTime
  actualDate        DateTime?
  isActual          Boolean          @default(false) // true if flow has occurred
  
  // Probability and confidence (for projections)
  probability       Float            @default(100) // Probability this flow will occur (0-100)
  confidence        Float            @default(100) // Confidence in amount/timing (0-100)
  
  // Related entities
  loanId            String?
  loan              Loan?            @relation(fields: [loanId], references: [id])
  paymentId         String?
  payment           Payment?         @relation(fields: [paymentId], references: [id])
  contributionId    String?
  contribution      Contribution?    @relation(fields: [contributionId], references: [id])
  
  // Forecast relation
  forecastId        String?
  forecast          TreasuryForecast? @relation("ForecastFlows", fields: [forecastId], references: [id])
  
  // Source tracking
  source            String           @default("SYSTEM") // SYSTEM, MANUAL, IMPORT, API
  sourceRef         String?          // Reference to source data
  
  // Metadata
  tags              String[]         @default([])
  metadata          Json?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([type])
  @@index([category])
  @@index([expectedDate])
  @@index([isActual])
  @@index([loanId])
  @@index([paymentId])
  @@index([contributionId])
  @@index([forecastId])
}

// Import System Models
enum ImportStatus {
  PENDING
  PARSING
  MAPPED
  VALIDATING
  IMPORTING
  COMPLETED
  FAILED
  CANCELLED
}

enum ImportType {
  USERS
  LOANS
  CONTRIBUTIONS
  GUARANTEES
  PAYMENTS
}

enum ImportFileType {
  CSV
  EXCEL
}

enum ValidationSeverity {
  ERROR
  WARNING
  INFO
}

model ImportSession {
  id                String           @id @default(cuid())
  
  // Session details
  sessionNumber     String           @unique
  userId            String
  user              User             @relation("ImportSessions", fields: [userId], references: [id])
  
  // File information
  fileName          String
  originalName      String
  fileSize          Int
  fileType          ImportFileType
  filePath          String
  fileUrl           String?
  
  // Import configuration
  importType        ImportType
  status            ImportStatus     @default(PENDING)
  hasHeaders        Boolean          @default(true)
  delimiter         String?          @default(",")
  encoding          String           @default("utf8")
  
  // Processing info
  totalRows         Int              @default(0)
  processedRows     Int              @default(0)
  successRows       Int              @default(0)
  failedRows        Int              @default(0)
  skippedRows       Int              @default(0)
  
  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  processingTime    Int?             // in milliseconds
  
  // Configuration and results
  columnMapping     Json?            // Column to field mapping
  validationRules   Json?            // Applied validation rules
  errorReport       Json?            // Detailed error report
  successReport     Json?            // Success summary
  
  // Rollback capability
  canRollback       Boolean          @default(false)
  rollbackData      Json?            // Data needed for rollback
  rolledBackAt      DateTime?
  rolledBackBy      String?
  
  // Relations
  templateId        String?
  template          ImportTemplate?  @relation(fields: [templateId], references: [id])
  validations       ImportValidation[]
  
  // Metadata
  metadata          Json?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([importType])
  @@index([createdAt])
  @@index([sessionNumber])
}

model ImportTemplate {
  id                String           @id @default(cuid())
  
  // Template details
  name              String
  description       String?
  importType        ImportType
  isDefault         Boolean          @default(false)
  isActive          Boolean          @default(true)
  
  // Template configuration
  columnMapping     Json             // Default column to field mapping
  validationRules   Json?            // Default validation rules
  transformRules    Json?            // Data transformation rules
  
  // Metadata
  usageCount        Int              @default(0)
  lastUsedAt        DateTime?
  
  // Creator
  createdBy         String
  creator           User             @relation("CreatedTemplates", fields: [createdBy], references: [id])
  
  // Relations
  sessions          ImportSession[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([importType])
  @@index([isActive])
  @@index([createdBy])
}

model ImportValidation {
  id                String           @id @default(cuid())
  sessionId         String
  session           ImportSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // Validation details
  rowNumber         Int
  columnName        String?
  fieldName         String?
  severity          ValidationSeverity
  
  // Error information
  errorCode         String
  errorMessage      String
  expectedValue     String?
  actualValue       String?
  
  // Suggestions
  suggestedFix      String?
  canAutoFix        Boolean          @default(false)
  wasAutoFixed      Boolean          @default(false)
  
  // Context
  rowData           Json?            // Full row data for context
  
  createdAt         DateTime         @default(now())
  
  @@index([sessionId])
  @@index([severity])
  @@index([errorCode])
}