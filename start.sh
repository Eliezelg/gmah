#!/bin/bash

# =============================================
# GMAH Platform - Script de d√©marrage rapide
# =============================================

echo "üöÄ GMAH Platform - D√©marrage..."
echo "================================"

# Couleurs pour output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# V√©rifier Node.js
echo -e "${YELLOW}üìã V√©rification des pr√©requis...${NC}"
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js n'est pas install√©!${NC}"
    echo "Installer Node.js 18+ depuis: https://nodejs.org"
    exit 1
fi
echo -e "${GREEN}‚úÖ Node.js $(node -v)${NC}"

# V√©rifier PostgreSQL
if ! command -v psql &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  PostgreSQL n'est pas install√© localement${NC}"
    echo "Utilisation de Docker pour PostgreSQL..."
    USE_DOCKER_DB=true
else
    echo -e "${GREEN}‚úÖ PostgreSQL install√©${NC}"
    USE_DOCKER_DB=false
fi

# V√©rifier si .env existe
if [ ! -f "apps/api/.env" ]; then
    echo -e "${YELLOW}üìù Cr√©ation du fichier .env...${NC}"
    cp .env.example apps/api/.env
    echo -e "${YELLOW}‚ö†Ô∏è  Veuillez configurer apps/api/.env avec vos valeurs${NC}"
    echo "Notamment:"
    echo "  - DATABASE_URL"
    echo "  - JWT_SECRET (g√©n√©rer avec: openssl rand -base64 32)"
    echo "  - RESEND_API_KEY (optionnel pour les emails)"
    read -p "Appuyez sur Entr√©e apr√®s avoir configur√© .env..."
fi

if [ ! -f "apps/web/.env.local" ]; then
    echo -e "${YELLOW}üìù Cr√©ation du fichier .env.local pour le frontend...${NC}"
    cat > apps/web/.env.local << EOF
NEXT_PUBLIC_API_URL=http://localhost:3333
NEXT_PUBLIC_APP_URL=http://localhost:3001
EOF
fi

# Installer les d√©pendances si n√©cessaire
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}üì¶ Installation des d√©pendances...${NC}"
    npm install
fi

# D√©marrer PostgreSQL avec Docker si n√©cessaire
if [ "$USE_DOCKER_DB" = true ]; then
    echo -e "${YELLOW}üê≥ D√©marrage de PostgreSQL avec Docker...${NC}"
    docker-compose up -d postgres
    sleep 5
fi

# D√©marrer Redis avec Docker (optionnel)
echo -e "${YELLOW}üîÑ D√©marrage de Redis (optionnel)...${NC}"
docker-compose up -d redis 2>/dev/null || echo -e "${YELLOW}Redis non disponible (optionnel)${NC}"

# V√©rifier/cr√©er la base de donn√©es
echo -e "${YELLOW}üóÑÔ∏è  Configuration de la base de donn√©es...${NC}"
cd apps/api

# Cr√©er la DB si elle n'existe pas
if [ "$USE_DOCKER_DB" = true ]; then
    docker exec -it gmah-postgres psql -U postgres -c "CREATE DATABASE gmah_db;" 2>/dev/null || echo "DB d√©j√† existante"
else
    createdb gmah_db 2>/dev/null || echo "DB d√©j√† existante"
fi

# Migrations Prisma
echo -e "${YELLOW}üîÑ Application des migrations...${NC}"
npx prisma migrate deploy 2>/dev/null || npx prisma db push

# G√©n√©rer le client Prisma
npx prisma generate

cd ../..

# D√©marrer les services
echo -e "${GREEN}‚ú® D√©marrage de GMAH Platform!${NC}"
echo "================================"
echo -e "${GREEN}üìç URLs:${NC}"
echo -e "  Frontend: ${GREEN}http://localhost:3001${NC}"
echo -e "  Backend:  ${GREEN}http://localhost:3333${NC}"
echo -e "  Swagger:  ${GREEN}http://localhost:3333/api${NC}"
echo "================================"
echo -e "${YELLOW}Appuyez sur Ctrl+C pour arr√™ter${NC}"
echo ""

# D√©marrer en mode dev
npm run dev